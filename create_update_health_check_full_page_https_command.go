/*
 * Oktawave API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package odk

// Create/update FullPage Https health check command
type CreateUpdateHealthCheckFullPageHttpsCommand struct {

	// Health check http method type (Dictionary 166)
	HttpMethodId int32 `json:"HttpMethodId"`

	// The content has to match the expression (GET and POST methods only)
	ContentRegularExpression string `json:"ContentRegularExpression,omitempty"`

	// The content cannot match the expression (GET and POST methods only)
	ContentNegativeRegularExpression string `json:"ContentNegativeRegularExpression,omitempty"`

	// Port
	Port int32 `json:"Port"`

	// Time limit for the main page body [ms]
	PageTimeout int32 `json:"PageTimeout"`

	// Time limit for each page elements [ms]
	ElementTimeout int32 `json:"ElementTimeout"`

	// Time limit for all page elements [ms]
	ElementsTotalTimeout int32 `json:"ElementsTotalTimeout"`

	// Fetch page elements
	FetchPageElements bool `json:"FetchPageElements"`

	// Maximum length of HTTP redirects sequence
	MaxRedirects int32 `json:"MaxRedirects"`

	// Maximum number of HTTP requests run in parallel
	MaxParallelRequests int32 `json:"MaxParallelRequests"`

	// Generate a HAR file for each check
	GenerateHar bool `json:"GenerateHar"`

	// Number of elements that may not be fetched correctly
	AllowedElementErrorCount int32 `json:"AllowedElementErrorCount,omitempty"`

	// Content size limit (bytes)
	ContentSizeLimit int32 `json:"ContentSizeLimit,omitempty"`

	// Ignore HTML code processing time in results
	IgnoreHtmlParsingTime bool `json:"IgnoreHtmlParsingTime"`

	// Save cookies between checks
	SaveCookies bool `json:"SaveCookies"`

	// Disable HTTP transfer compression
	DisableContentEncoding bool `json:"DisableContentEncoding"`

	// Content
	Content string `json:"Content,omitempty"`

	// Content type
	ContentType string `json:"ContentType,omitempty"`

	// Ignore errors for elements with URLs matching the expression (only if page elements are fetched)
	IgnoredElementsFilter string `json:"IgnoredElementsFilter,omitempty"`

	// Do not fetch elements with URLs that match the expression
	ElementsFilter string `json:"ElementsFilter,omitempty"`

	// How many (%) locations have to report an error to consider it a breakdown
	ErrorTolerance int32 `json:"ErrorTolerance"`

	// Health check name
	Name string `json:"Name"`

	// URL or IP address of the monitored service
	Address string `json:"Address"`

	// Time interval between health checks, in seconds
	Interval int32 `json:"Interval"`

	// Is paused
	Paused bool `json:"Paused"`

	// Use random substitute locations in case of location breakdown
	LocationsFailoverEnabled bool `json:"LocationsFailoverEnabled"`

	// Notification types enabled for a health check
	NotificationTypeIds []int32 `json:"NotificationTypeIds,omitempty"`

	// Event types with enabled notification
	NotificationEventTypeIds []int32 `json:"NotificationEventTypeIds,omitempty"`

	// Time when notification is sent
	NotificationTimeId int32 `json:"NotificationTimeId"`
}
