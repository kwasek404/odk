/*
 * Oktawave API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package odk

import (
	"time"
)

// FullPage health check
type HealthCheckFullPage struct {

	// Health check http method type
	HttpMethod *DictionaryItem `json:"HttpMethod,omitempty"`

	// The content has to match the expression (GET and POST methods only)
	ContentRegularExpression string `json:"ContentRegularExpression,omitempty"`

	// The content cannot match the expression (GET and POST methods only)
	ContentNegativeRegularExpression string `json:"ContentNegativeRegularExpression,omitempty"`

	// Port
	Port int32 `json:"Port,omitempty"`

	// Time limit for the main page body [ms]
	PageTimeout int32 `json:"PageTimeout,omitempty"`

	// Time limit for each page elements [ms]
	ElementTimeout int32 `json:"ElementTimeout,omitempty"`

	// Time limit for all page elements [ms]
	ElementsTotalTimeout int32 `json:"ElementsTotalTimeout,omitempty"`

	// Fetch page elements
	FetchPageElements bool `json:"FetchPageElements,omitempty"`

	// Maximum length of HTTP redirects sequence
	MaxRedirects int32 `json:"MaxRedirects,omitempty"`

	// Maximum number of HTTP requests run in parallel
	MaxParallelRequests int32 `json:"MaxParallelRequests,omitempty"`

	// Generate a HAR file for each check
	GenerateHar bool `json:"GenerateHar,omitempty"`

	// Number of elements that may not be fetched correctly
	AllowedElementErrorCount int32 `json:"AllowedElementErrorCount,omitempty"`

	// Content size limit (bytes)
	ContentSizeLimit int32 `json:"ContentSizeLimit,omitempty"`

	// Ignore HTML code processing time in results
	IgnoreHtmlParsingTime bool `json:"IgnoreHtmlParsingTime,omitempty"`

	// Save cookies between checks
	SaveCookies bool `json:"SaveCookies,omitempty"`

	// Disable HTTP transfer compression
	DisableContentEncoding bool `json:"DisableContentEncoding,omitempty"`

	// Content
	Content string `json:"Content,omitempty"`

	// Content type
	ContentType string `json:"ContentType,omitempty"`

	// Ignore errors for elements with URLs matching the expression (only if page elements are fetched)
	IgnoredElementsFilter string `json:"IgnoredElementsFilter,omitempty"`

	// Do not fetch elements with URLs that match the expression
	ElementsFilter string `json:"ElementsFilter,omitempty"`

	// Notification types enabled for a health check
	NotificationTypes []DictionaryItem `json:"NotificationTypes,omitempty"`

	// Event types with enabled notification
	NotificationEventTypes []DictionaryItem `json:"NotificationEventTypes,omitempty"`

	// Time when notification is sent
	NotificationTime *DictionaryItem `json:"NotificationTime,omitempty"`

	// Use random substitute locations in case of location breakdown
	LocationsFailoverEnabled bool `json:"LocationsFailoverEnabled,omitempty"`

	// How many (%) locations have to report an error to consider it a breakdown
	ErrorTolerance int32 `json:"ErrorTolerance,omitempty"`

	// Id
	Id int32 `json:"Id,omitempty"`

	// Interval
	Interval int32 `json:"Interval,omitempty"`

	// Name
	Name string `json:"Name,omitempty"`

	// Address
	Address string `json:"Address,omitempty"`

	// Type
	ServiceType *DictionaryItem `json:"ServiceType,omitempty"`

	// State
	State *DictionaryItem `json:"State,omitempty"`

	// Details url
	DetailsLocation string `json:"DetailsLocation,omitempty"`

	// Is paused
	Paused bool `json:"Paused,omitempty"`

	// Is suspended
	Suspended bool `json:"Suspended,omitempty"`

	// Last invalid check
	LastInvalidCheck time.Time `json:"LastInvalidCheck,omitempty"`

	// Last valid check
	LastValidCheck time.Time `json:"LastValidCheck,omitempty"`

	// Description
	Description string `json:"Description,omitempty"`
}
